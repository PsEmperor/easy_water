package ps.emperor.easy_water.greendao;

import android.database.Cursor;

import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IRRIGATION_PROJECT.
*/
public class IrrigationProjectDao extends AbstractDao<IrrigationProject, Long> {

    public static final String TABLENAME = "IRRIGATION_PROJECT";

    /**
     * Properties of entity IrrigationProject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Irrigation = new Property(1, String.class, "irrigation", false, "IRRIGATION");
        public final static Property Round = new Property(2, String.class, "round", false, "ROUND");
        public final static Property Marshalling = new Property(3, String.class, "marshalling", false, "MARSHALLING");
        public final static Property Projectstart = new Property(4, String.class, "projectstart", false, "PROJECTSTART");
        public final static Property Projectduration = new Property(5, String.class, "projectduration", false, "PROJECTDURATION");
        public final static Property Projectend = new Property(6, String.class, "projectend", false, "PROJECTEND");
        public final static Property Projectsole = new Property(7, Integer.class, "projectsole", false, "PROJECTSOLE");
    };


    public IrrigationProjectDao(DaoConfig config) {
        super(config);
    }
    
    public IrrigationProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IRRIGATION_PROJECT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IRRIGATION' TEXT," + // 1: irrigation
                "'ROUND' TEXT," + // 2: round
                "'MARSHALLING' TEXT," + // 3: marshalling
                "'PROJECTSTART' TEXT," + // 4: projectstart
                "'PROJECTDURATION' TEXT," + // 5: projectduration
                "'PROJECTEND' TEXT," + // 6: projectend
                "'PROJECTSOLE' INTEGER);"); // 7: projectsole
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IRRIGATION_PROJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IrrigationProject entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String irrigation = entity.getIrrigation();
        if (irrigation != null) {
            stmt.bindString(2, irrigation);
        }
 
        String round = entity.getRound();
        if (round != null) {
            stmt.bindString(3, round);
        }
 
        String marshalling = entity.getMarshalling();
        if (marshalling != null) {
            stmt.bindString(4, marshalling);
        }
 
        String projectstart = entity.getProjectstart();
        if (projectstart != null) {
            stmt.bindString(5, projectstart);
        }
 
        String projectduration = entity.getProjectduration();
        if (projectduration != null) {
            stmt.bindString(6, projectduration);
        }
 
        String projectend = entity.getProjectend();
        if (projectend != null) {
            stmt.bindString(7, projectend);
        }
 
        Integer projectsole = entity.getProjectsole();
        if (projectsole != null) {
            stmt.bindLong(8, projectsole);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IrrigationProject readEntity(Cursor cursor, int offset) {
        IrrigationProject entity = new IrrigationProject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // irrigation
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // round
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // marshalling
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // projectstart
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // projectduration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // projectend
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // projectsole
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IrrigationProject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIrrigation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRound(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMarshalling(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProjectstart(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProjectduration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProjectend(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProjectsole(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IrrigationProject entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IrrigationProject entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
