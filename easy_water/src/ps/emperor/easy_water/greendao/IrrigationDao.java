package ps.emperor.easy_water.greendao;

import android.database.Cursor;

import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IRRIGATION.
*/
public class IrrigationDao extends AbstractDao<Irrigation, Long> {

    public static final String TABLENAME = "IRRIGATION";

    /**
     * Properties of entity Irrigation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Irrigation = new Property(1, String.class, "irrigation", false, "IRRIGATION");
        public final static Property FirstDerviceID = new Property(2, String.class, "firstDerviceID", false, "FIRST_DERVICE_ID");
        public final static Property Area = new Property(3, String.class, "area", false, "AREA");
        public final static Property Longitude = new Property(4, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(5, String.class, "latitude", false, "LATITUDE");
        public final static Property SuperEqu = new Property(6, String.class, "superEqu", false, "SUPER_EQU");
        public final static Property Isrelevance = new Property(7, Integer.class, "isrelevance", false, "ISRELEVANCE");
        public final static Property Groupnumber = new Property(8, Integer.class, "groupnumber", false, "GROUPNUMBER");
        public final static Property Valuenumber = new Property(9, Integer.class, "valuenumber", false, "VALUENUMBER");
        public final static Property Flushtime = new Property(10, String.class, "flushtime", false, "FLUSHTIME");
        public final static Property NightStart = new Property(11, String.class, "nightStart", false, "NIGHT_START");
        public final static Property NightEnd = new Property(12, String.class, "nightEnd", false, "NIGHT_END");
        public final static Property IsTimeLong = new Property(13, Integer.class, "isTimeLong", false, "IS_TIME_LONG");
        public final static Property NightSwitch = new Property(14, Integer.class, "nightSwitch", false, "NIGHT_SWITCH");
        public final static Property LongSwitch = new Property(15, Integer.class, "longSwitch", false, "LONG_SWITCH");
        public final static Property NContinue = new Property(16, String.class, "nContinue", false, "N_CONTINUE");
        public final static Property NNumber = new Property(17, Integer.class, "nNumber", false, "N_NUMBER");
        public final static Property NRound = new Property(18, Integer.class, "nRound", false, "N_ROUND");
        public final static Property SeasonStrat = new Property(19, String.class, "seasonStrat", false, "SEASON_STRAT");
        public final static Property SeasonEnd = new Property(20, String.class, "seasonEnd", false, "SEASON_END");
        public final static Property SeasonRound = new Property(21, Integer.class, "seasonRound", false, "SEASON_ROUND");
    };


    public IrrigationDao(DaoConfig config) {
        super(config);
    }
    
    public IrrigationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IRRIGATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IRRIGATION' TEXT," + // 1: irrigation
                "'FIRST_DERVICE_ID' TEXT," + // 2: firstDerviceID
                "'AREA' TEXT," + // 3: area
                "'LONGITUDE' TEXT," + // 4: longitude
                "'LATITUDE' TEXT," + // 5: latitude
                "'SUPER_EQU' TEXT," + // 6: superEqu
                "'ISRELEVANCE' INTEGER," + // 7: isrelevance
                "'GROUPNUMBER' INTEGER," + // 8: groupnumber
                "'VALUENUMBER' INTEGER," + // 9: valuenumber
                "'FLUSHTIME' TEXT," + // 10: flushtime
                "'NIGHT_START' TEXT," + // 11: nightStart
                "'NIGHT_END' TEXT," + // 12: nightEnd
                "'IS_TIME_LONG' INTEGER," + // 13: isTimeLong
                "'NIGHT_SWITCH' INTEGER," + // 14: nightSwitch
                "'LONG_SWITCH' INTEGER," + // 15: longSwitch
                "'N_CONTINUE' TEXT," + // 16: nContinue
                "'N_NUMBER' INTEGER," + // 17: nNumber
                "'N_ROUND' INTEGER," + // 18: nRound
                "'SEASON_STRAT' TEXT," + // 19: seasonStrat
                "'SEASON_END' TEXT," + // 20: seasonEnd
                "'SEASON_ROUND' INTEGER);"); // 21: seasonRound
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IRRIGATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Irrigation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String irrigation = entity.getIrrigation();
        if (irrigation != null) {
            stmt.bindString(2, irrigation);
        }
 
        String firstDerviceID = entity.getFirstDerviceID();
        if (firstDerviceID != null) {
            stmt.bindString(3, firstDerviceID);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(4, area);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(5, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(6, latitude);
        }
 
        String superEqu = entity.getSuperEqu();
        if (superEqu != null) {
            stmt.bindString(7, superEqu);
        }
 
        Integer isrelevance = entity.getIsrelevance();
        if (isrelevance != null) {
            stmt.bindLong(8, isrelevance);
        }
 
        Integer groupnumber = entity.getGroupnumber();
        if (groupnumber != null) {
            stmt.bindLong(9, groupnumber);
        }
 
        Integer valuenumber = entity.getValuenumber();
        if (valuenumber != null) {
            stmt.bindLong(10, valuenumber);
        }
 
        String flushtime = entity.getFlushtime();
        if (flushtime != null) {
            stmt.bindString(11, flushtime);
        }
 
        String nightStart = entity.getNightStart();
        if (nightStart != null) {
            stmt.bindString(12, nightStart);
        }
 
        String nightEnd = entity.getNightEnd();
        if (nightEnd != null) {
            stmt.bindString(13, nightEnd);
        }
 
        Integer isTimeLong = entity.getIsTimeLong();
        if (isTimeLong != null) {
            stmt.bindLong(14, isTimeLong);
        }
 
        Integer nightSwitch = entity.getNightSwitch();
        if (nightSwitch != null) {
            stmt.bindLong(15, nightSwitch);
        }
 
        Integer longSwitch = entity.getLongSwitch();
        if (longSwitch != null) {
            stmt.bindLong(16, longSwitch);
        }
 
        String nContinue = entity.getNContinue();
        if (nContinue != null) {
            stmt.bindString(17, nContinue);
        }
 
        Integer nNumber = entity.getNNumber();
        if (nNumber != null) {
            stmt.bindLong(18, nNumber);
        }
 
        Integer nRound = entity.getNRound();
        if (nRound != null) {
            stmt.bindLong(19, nRound);
        }
 
        String seasonStrat = entity.getSeasonStrat();
        if (seasonStrat != null) {
            stmt.bindString(20, seasonStrat);
        }
 
        String seasonEnd = entity.getSeasonEnd();
        if (seasonEnd != null) {
            stmt.bindString(21, seasonEnd);
        }
 
        Integer seasonRound = entity.getSeasonRound();
        if (seasonRound != null) {
            stmt.bindLong(22, seasonRound);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Irrigation readEntity(Cursor cursor, int offset) {
        Irrigation entity = new Irrigation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // irrigation
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstDerviceID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // area
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // longitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // superEqu
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // isrelevance
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // groupnumber
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // valuenumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // flushtime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nightStart
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // nightEnd
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // isTimeLong
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // nightSwitch
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // longSwitch
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nContinue
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // nNumber
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // nRound
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // seasonStrat
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // seasonEnd
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21) // seasonRound
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Irrigation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIrrigation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirstDerviceID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSuperEqu(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsrelevance(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setGroupnumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setValuenumber(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFlushtime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNightStart(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNightEnd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsTimeLong(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setNightSwitch(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setLongSwitch(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setNContinue(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNNumber(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setNRound(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setSeasonStrat(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSeasonEnd(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSeasonRound(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Irrigation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Irrigation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
