package ps.emperor.easy_water.greendao;

import android.database.Cursor;

import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IRRIGATION.
*/
public class IrrigationDao extends AbstractDao<Irrigation, Long> {

    public static final String TABLENAME = "IRRIGATION";

    /**
     * Properties of entity Irrigation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Irrigation = new Property(1, String.class, "irrigation", false, "IRRIGATION");
        public final static Property Isrelevance = new Property(2, Integer.class, "isrelevance", false, "ISRELEVANCE");
        public final static Property Groupnumber = new Property(3, String.class, "groupnumber", false, "GROUPNUMBER");
        public final static Property Valuenumber = new Property(4, String.class, "valuenumber", false, "VALUENUMBER");
        public final static Property Filter = new Property(5, String.class, "filter", false, "FILTER");
        public final static Property Timestart = new Property(6, String.class, "timestart", false, "TIMESTART");
        public final static Property Timeend = new Property(7, String.class, "timeend", false, "TIMEEND");
        public final static Property Userinfo = new Property(8, String.class, "userinfo", false, "USERINFO");
        public final static Property Userphone = new Property(9, Boolean.class, "userphone", false, "USERPHONE");
        public final static Property Cropsinfo = new Property(10, Long.class, "cropsinfo", false, "CROPSINFO");
        public final static Property Cropstime = new Property(11, String.class, "cropstime", false, "CROPSTIME");
    };


    public IrrigationDao(DaoConfig config) {
        super(config);
    }
    
    public IrrigationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IRRIGATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IRRIGATION' TEXT," + // 1: irrigation
                "'ISRELEVANCE' INTEGER," + // 2: isrelevance
                "'GROUPNUMBER' TEXT," + // 3: groupnumber
                "'VALUENUMBER' TEXT," + // 4: valuenumber
                "'FILTER' TEXT," + // 5: filter
                "'TIMESTART' TEXT," + // 6: timestart
                "'TIMEEND' TEXT," + // 7: timeend
                "'USERINFO' TEXT," + // 8: userinfo
                "'USERPHONE' INTEGER," + // 9: userphone
                "'CROPSINFO' INTEGER," + // 10: cropsinfo
                "'CROPSTIME' TEXT);"); // 11: cropstime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IRRIGATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Irrigation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String irrigation = entity.getIrrigation();
        if (irrigation != null) {
            stmt.bindString(2, irrigation);
        }
 
        Integer isrelevance = entity.getIsrelevance();
        if (isrelevance != null) {
            stmt.bindLong(3, isrelevance);
        }
 
        String groupnumber = entity.getGroupnumber();
        if (groupnumber != null) {
            stmt.bindString(4, groupnumber);
        }
 
        String valuenumber = entity.getValuenumber();
        if (valuenumber != null) {
            stmt.bindString(5, valuenumber);
        }
 
        String filter = entity.getFilter();
        if (filter != null) {
            stmt.bindString(6, filter);
        }
 
        String timestart = entity.getTimestart();
        if (timestart != null) {
            stmt.bindString(7, timestart);
        }
 
        String timeend = entity.getTimeend();
        if (timeend != null) {
            stmt.bindString(8, timeend);
        }
 
        String userinfo = entity.getUserinfo();
        if (userinfo != null) {
            stmt.bindString(9, userinfo);
        }
 
        Boolean userphone = entity.getUserphone();
        if (userphone != null) {
            stmt.bindLong(10, userphone ? 1l: 0l);
        }
 
        Long cropsinfo = entity.getCropsinfo();
        if (cropsinfo != null) {
            stmt.bindLong(11, cropsinfo);
        }
 
        String cropstime = entity.getCropstime();
        if (cropstime != null) {
            stmt.bindString(12, cropstime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Irrigation readEntity(Cursor cursor, int offset) {
        Irrigation entity = new Irrigation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // irrigation
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // isrelevance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupnumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // valuenumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // filter
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timestart
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeend
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userinfo
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // userphone
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // cropsinfo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // cropstime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Irrigation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIrrigation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsrelevance(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGroupnumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValuenumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFilter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestart(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeend(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserinfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserphone(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setCropsinfo(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setCropstime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Irrigation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Irrigation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
